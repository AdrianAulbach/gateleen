subprojects {

  apply plugin: 'idea'
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'

  repositories {

    try {
      maven { url "$repository" }
      println 'use custom repository: ' + "$repository"
    } catch(Exception e) {
      maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
      println 'use standard repository'
    }
    mavenCentral()

  }

  task sourceJar(type: Jar) {
    description = 'Builds a source jar artifact suitable for maven deployment.'
    classifier = 'sources'
    from sourceSets.main.java
  }

  compileJava {
    options.encoding = "UTF-8"
  }

  javadoc {
    options.encoding = "UTF-8"
    classpath = configurations.compile
  }

  task javadocJar(type: Jar) {
    description = 'Builds a javadoc jar artifact suitable for maven deployment.'
    classifier = 'javadoc'
    from javadoc.destinationDir
  }
  javadocJar.dependsOn javadoc

  build.dependsOn sourceJar, javadocJar

  artifacts {
    archives jar, sourceJar, javadocJar
  }

  ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  test {
    testLogging {
      // set options for log level LIFECYCLE
      events "started", "skipped", "failed"
      exceptionFormat "full"

      // set options for log level QUIET
      quiet {
        events "started", "skipped", "failed"
        exceptionFormat "full"
      }

      // remove standard output/error logging from --info builds
      // by assigning only 'failed' and 'skipped' events
      info.events = ["failed", "skipped"]
    }
  }

  if (!project.hasProperty('repoUsername')) {
    ext.repoUsername = 'randomUsername'
  } else {
    println 'got property repoUsername: ' + repoUsername
  }

  if (!project.hasProperty('repoPassword')) {
    ext.repoPassword = 'randomPassword'
  } else {
    println 'got property repoPassword: ' + repoPassword
  }

  if(!project.hasProperty('uploadRepository')) {
    ext.uploadRepository = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
  } else {
    println 'found custom uploadRepository: ' + uploadRepository
  }

  if(!project.hasProperty('snapshotRepository')) {
    ext.snapshotRepository = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
  } else {
    println 'found custom snapshotRepository: ' + snapshotRepository
  }

  uploadArchives {
    group 'build'
    description = "Does a maven deploy of archives artifacts"

    repositories {
      mavenDeployer {

        configuration = configurations.archives

        repository(url: "$uploadRepository") {
          authentication(userName: "$repoUsername", password: "$repoPassword")
        }

        snapshotRepository(url: "$snapshotRepository") {
          authentication(userName: "$repoUsername", password: "$repoPassword")
        }

        if (isReleaseVersion) {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        }

        configurePom(pom)
      }
    }
  }
}

def configurePom(def pom) {
  pom.project {
    name 'gateleen'
    description 'Middleware library based on Vert.x to build advanced JSON/REST communication servers'
    inceptionYear '2016'
    packaging 'jar'
    url 'https://github.com/swisspush/gateleen'

    developers {
      developer {
        id 'floriankammermann'
        name 'Florian Kammermann'
        email 'florian@kammermann.me'
      }
      developer {
        id 'mcweba'
        name 'Marc-Andre Weber'
        url 'https://github.com/mcweba'
      }
    }

    scm {
      url 'https://github.com/swisspush/gateleen.git'
    }

    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }

    properties {
      setProperty('project.build.sourceEncoding', 'UTF8')
    }
  }
}